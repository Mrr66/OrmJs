// JavaScript source code
//Orm JS build 2020
//By Marcos Rafael Rodrigues
//E-mail: marcos@sigvirtual.com
//Site: sigvirtual.com
//Language: US

function dataBaseLocation(t, e, r = "DB SQL location", o = 2097152) { var a = this; a.db = null, a.valueMarcacao = null, a.connect = function () { a.db = openDatabase(t, e, r, o) }, a.Save = function (t) { t.constructor.name; a.db.transaction(function (e) { a.valueMarcacao = new Array, a.GetValueAttribute(t), e.executeSql("INSERT INTO " + t.constructor.name + "(" + a.GetAttribute(Object.keys(t)) + ") VALUES (" + a.valueMarcacao.toString() + ")", a.GetValueAttribute(t), console.log("OK"), console.log("Erro")) }) }, a.Update = function (t) { var e = objeto.constructor.name; a.db.transaction(function (t) { a.valueMarcacao = new Array; var r = `update ${e} ${a.obterValoresSetUpdate(a.GetAttribute(Object.keys(objeto)), a.GetValueAttribute(objeto))} where rowid=1`; t.executeSql(r) }) }, a.CreateTable = function (t) { var e = t.constructor.name; a.db.transaction(function (r) { console.log("Tabela " + e + " table attributes " + a.GetAttribute(Object.keys(t))), r.executeSql("CREATE TABLE " + e + " (" + a.GetAttribute(Object.keys(t)) + ")") }) }, a.DeleteRow = function (t) { var e = t.constructor.name; a.db.transaction(function (r) { console.log("Tabela " + e + " atributos da tabela " + a.GetAttribute(Object.keys(t))), t.Id > 0 ? r.executeSql("DELETE FROM " + e + " WHERE rowId = " + t.Id) : console.error("Id table " + e + " it was not passed. Note: all entities must have Id attribute") }) }, a.DeleteById = function (t, e) { var r = e.constructor.name; a.db.transaction(function (o) { console.log("Tabela " + r + " atributos da tabela " + a.GetAttribute(Object.keys(e))), t > 0 ? o.executeSql("DELETE FROM " + r + " WHERE rowId = " + t) : console.error("Id table " + r + " it was not passed. Note: all entities must have Id attribute") }) }, a.GetAll = function (t, e) { new Array; var r = t.constructor.name; a.db.transaction(function (t) { t.executeSql("SELECT  rowId, * FROM " + r, [], e, a.errorCB) }) }, a.QuerySql = function (t, e) { var r = new Array; return a.db.transaction(function (r) { r.executeSql(t, [], e, a.errorCB) }), r }, a.GetByObject = function (t, e) { var r = t.constructor.name; a.db.transaction(function (o) { t.Id > 0 ? o.executeSql("SELECT  rowId, * FROM " + r + " where rowId = " + t.Id, [], result = e, a.errorCB) : console.error("Id da tabela " + r + " it was not passed.Note: all entities must have Id attribute") }) }, a.GetById = function (t, e, r) { var o = e.constructor.name; void 0 === o && console.error("It is necessary to pass the end by parameter."), a.db.transaction(function (e) { t > 0 ? e.executeSql("SELECT  rowId, * FROM " + o + " where rowId = " + t, [], result = r, a.errorCB) : console.error("Id da table " + o + " it was not passed.Note: all entities must have Id attribute") }) }, a.GetAttribute = function (t) { var e = ""; return t.forEach((r, o) => { e += r, o + 1 < t.length && (e += ",") }), e }, a.GetValueAttribute = function (t) { var e = new Array; return Object.getOwnPropertyNames(t).forEach(r => { e.push(t[r]), a.valueMarcacao.push("?") }), e }, a.DeleteTable = function (t) { var e = t.constructor.name; a.db.transaction(function (t) { console.log("Table " + e + " deleted "), t.executeSql("DROP TABLE " + e) }) }, a.errorCB = function (t) { console.log("Erro interno do app: " + t, "Erro") }, a.toList = function (t, e) { for (var r = new Array, o = 0; o < e.length; o++)r.push(e[o]); return r } }